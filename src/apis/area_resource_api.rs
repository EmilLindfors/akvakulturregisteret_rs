/*
 * Offentlig Akvakulturregister
 *
 * API for det nye offentlige Akvakulturregisteret
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: akva-hjelp@fiskeridir.no
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use async_trait::async_trait;
#[cfg(feature = "mockall")]
use mockall::automock;
use reqwest;
use serde::{Deserialize, Serialize};
use std::sync::Arc;

#[cfg_attr(feature = "mockall", automock)]
#[async_trait]
pub trait AreaResourceApi: Send + Sync {
    async fn area<'version_id>(
        &self,
        version_id: &'version_id str,
    ) -> Result<ResponseContent<AreaSuccess>, Error<AreaError>>;
    async fn area_by_code_and_type<'r#type, 'code, 'time>(
        &self,
        r#type: &'r#type str,
        code: &'code str,
        time: Option<&'time str>,
    ) -> Result<ResponseContent<AreaByCodeAndTypeSuccess>, Error<AreaByCodeAndTypeError>>;
    async fn areas<'r#type, 'code, 'time, 'range>(
        &self,
        r#type: Option<&'r#type str>,
        code: Option<&'code str>,
        time: Option<&'time str>,
        range: Option<&'range str>,
    ) -> Result<ResponseContent<AreasSuccess>, Error<AreasError>>;
}

pub struct AreaResourceApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl AreaResourceApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

#[async_trait]
impl AreaResourceApi for AreaResourceApiClient {
    async fn area<'version_id>(
        &self,
        version_id: &'version_id str,
    ) -> Result<ResponseContent<AreaSuccess>, Error<AreaError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v1/areas/{version_id}",
            local_var_configuration.base_path,
            version_id = crate::apis::urlencode(version_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<AreaSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<AreaError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn area_by_code_and_type<'r#type, 'code, 'time>(
        &self,
        r#type: &'r#type str,
        code: &'code str,
        time: Option<&'time str>,
    ) -> Result<ResponseContent<AreaByCodeAndTypeSuccess>, Error<AreaByCodeAndTypeError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/api/v1/areas/{type}/{code}", local_var_configuration.base_path, type=crate::apis::urlencode(r#type), code=crate::apis::urlencode(code));
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = time {
            local_var_req_builder =
                local_var_req_builder.query(&[("time", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<AreaByCodeAndTypeSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<AreaByCodeAndTypeError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn areas<'r#type, 'code, 'time, 'range>(
        &self,
        r#type: Option<&'r#type str>,
        code: Option<&'code str>,
        time: Option<&'time str>,
        range: Option<&'range str>,
    ) -> Result<ResponseContent<AreasSuccess>, Error<AreasError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/api/v1/areas", local_var_configuration.base_path);
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = r#type {
            local_var_req_builder =
                local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = code {
            local_var_req_builder =
                local_var_req_builder.query(&[("code", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = time {
            local_var_req_builder =
                local_var_req_builder.query(&[("time", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = range {
            local_var_req_builder =
                local_var_req_builder.query(&[("range", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<AreasSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<AreasError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed successes of method [`area`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AreaSuccess {
    Status200(models::AreaListItem),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`area_by_code_and_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AreaByCodeAndTypeSuccess {
    Status200(models::AreaListItem),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`areas`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AreasSuccess {
    Status200(Vec<models::AreaListItem>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`area`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AreaError {
    Status400(std::collections::HashMap<String, Vec<String>>),
    Status500(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`area_by_code_and_type`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AreaByCodeAndTypeError {
    Status400(std::collections::HashMap<String, Vec<String>>),
    Status500(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`areas`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AreasError {
    Status400(std::collections::HashMap<String, Vec<String>>),
    Status500(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}
