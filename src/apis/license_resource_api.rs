/*
 * Offentlig Akvakulturregister
 *
 * API for det nye offentlige Akvakulturregisteret
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: akva-hjelp@fiskeridir.no
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use async_trait::async_trait;
#[cfg(feature = "mockall")]
use mockall::automock;
use reqwest;
use serde::{Deserialize, Serialize};
use std::sync::Arc;

#[derive(bon::Builder)]
pub struct GetLicensesParams<
    'license_nr,
    'original_license_nr,
    'legal_entity_nr_id,
    'legal_entity_nr,
    'legal_entity_name,
    'portfolio_type,
    'tag,
    'not_tag,
    'intention,
    'produces,
    'species_code,
    'species_type,
    'species_comp_id,
    'municipality_code,
    'county_code,
    'production_area_code,
    'valid_from,
    'registered_from,
    'temporary_until,
    'temporary_from,
    'range,
> {
    license_nr: Option<&'license_nr str>,
    original_license_nr: Option<&'original_license_nr str>,
    legal_entity_nr_id: Option<&'legal_entity_nr_id str>,
    legal_entity_nr: Option<&'legal_entity_nr str>,
    legal_entity_name: Option<&'legal_entity_name str>,
    portfolio_type: Option<&'portfolio_type str>,
    tag: Option<&'tag str>,
    not_tag: Option<&'not_tag str>,
    intention: Option<&'intention str>,
    produces: Option<&'produces str>,
    species_code: Option<&'species_code str>,
    species_type: Option<&'species_type str>,
    species_comp_id: Option<&'species_comp_id str>,
    municipality_code: Option<&'municipality_code str>,
    county_code: Option<&'county_code str>,
    production_area_code: Option<&'production_area_code str>,
    valid_from: Option<&'valid_from str>,
    registered_from: Option<&'registered_from str>,
    temporary_until: Option<&'temporary_until str>,
    temporary_from: Option<&'temporary_from str>,
    range: Option<&'range str>,
}

#[cfg_attr(feature = "mockall", automock)]
#[async_trait]
pub trait LicenseResourceApi: Send + Sync {
    async fn get_ajour_transfers<'license_nr>(
        &self,
        license_nr: &'license_nr str,
    ) -> Result<ResponseContent<GetAjourTransfersSuccess>, Error<GetAjourTransfersError>>;
    async fn get_by_license_nr<'license_nr>(
        &self,
        license_nr: &'license_nr str,
    ) -> Result<ResponseContent<GetByLicenseNrSuccess>, Error<GetByLicenseNrError>>;
    async fn get_decisions1<'license_nr>(
        &self,
        license_nr: &'license_nr str,
    ) -> Result<ResponseContent<GetDecisions1Success>, Error<GetDecisions1Error>>;
    async fn get_license_capacity_history_by_license_nr<'license_nr>(
        &self,
        license_nr: &'license_nr str,
    ) -> Result<
        ResponseContent<GetLicenseCapacityHistoryByLicenseNrSuccess>,
        Error<GetLicenseCapacityHistoryByLicenseNrError>,
    >;
    async fn get_license_connection_for_site_by_site_nr1<'license_nr>(
        &self,
        license_nr: &'license_nr str,
    ) -> Result<
        ResponseContent<GetLicenseConnectionForSiteBySiteNr1Success>,
        Error<GetLicenseConnectionForSiteBySiteNr1Error>,
    >;
    async fn get_licenses<
        'license_nr,
        'original_license_nr,
        'legal_entity_nr_id,
        'legal_entity_nr,
        'legal_entity_name,
        'portfolio_type,
        'tag,
        'not_tag,
        'intention,
        'produces,
        'species_code,
        'species_type,
        'species_comp_id,
        'municipality_code,
        'county_code,
        'production_area_code,
        'valid_from,
        'registered_from,
        'temporary_until,
        'temporary_from,
        'range,
    >(
        &self,
        params: GetLicensesParams<
        'license_nr,
        'original_license_nr,
        'legal_entity_nr_id,
        'legal_entity_nr,
        'legal_entity_name,
        'portfolio_type,
        'tag,
        'not_tag,
        'intention,
        'produces,
        'species_code,
        'species_type,
        'species_comp_id,
        'municipality_code,
        'county_code,
        'production_area_code,
        'valid_from,
        'registered_from,
        'temporary_until,
        'temporary_from,
        'range,
        >
        ,
    ) -> Result<ResponseContent<GetLicensesSuccess>, Error<GetLicensesError>>;
    async fn get_licenses_overview<
        'license_nr,
        'original_license_nr,
        'legal_entity_nr_id,
        'legal_entity_nr,
        'legal_entity_name,
        'portfolio_type,
        'tag,
        'not_tag,
        'intention,
        'produces,
        'species_code,
        'species_type,
        'species_comp_id,
        'municipality_code,
        'county_code,
        'production_area_code,
        'valid_from,
        'registered_from,
        'temporary_until,
        'temporary_from,
        'range,
    >(
        &self,
        params: GetLicensesParams<
        'license_nr,
        'original_license_nr,
        'legal_entity_nr_id,
        'legal_entity_nr,
        'legal_entity_name,
        'portfolio_type,
        'tag,
        'not_tag,
        'intention,
        'produces,
        'species_code,
        'species_type,
        'species_comp_id,
        'municipality_code,
        'county_code,
        'production_area_code,
        'valid_from,
        'registered_from,
        'temporary_until,
        'temporary_from,
        'range,
        >
    ) -> Result<ResponseContent<GetLicensesOverviewSuccess>, Error<GetLicensesOverviewError>>;
    async fn get_liens<'license_nr>(
        &self,
        license_nr: &'license_nr str,
    ) -> Result<ResponseContent<GetLiensSuccess>, Error<GetLiensError>>;
}

pub struct LicenseResourceApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl LicenseResourceApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

#[async_trait]
impl LicenseResourceApi for LicenseResourceApiClient {
    async fn get_ajour_transfers<'license_nr>(
        &self,
        license_nr: &'license_nr str,
    ) -> Result<ResponseContent<GetAjourTransfersSuccess>, Error<GetAjourTransfersError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v1/licenses/{license_nr}/transfers",
            local_var_configuration.base_path,
            license_nr = crate::apis::urlencode(license_nr)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetAjourTransfersSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetAjourTransfersError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_by_license_nr<'license_nr>(
        &self,
        license_nr: &'license_nr str,
    ) -> Result<ResponseContent<GetByLicenseNrSuccess>, Error<GetByLicenseNrError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v1/licenses/{license_nr}",
            local_var_configuration.base_path,
            license_nr = crate::apis::urlencode(license_nr)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetByLicenseNrSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetByLicenseNrError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_decisions1<'license_nr>(
        &self,
        license_nr: &'license_nr str,
    ) -> Result<ResponseContent<GetDecisions1Success>, Error<GetDecisions1Error>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v1/licenses/{license_nr}/decisions",
            local_var_configuration.base_path,
            license_nr = crate::apis::urlencode(license_nr)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetDecisions1Success> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetDecisions1Error> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_license_capacity_history_by_license_nr<'license_nr>(
        &self,
        license_nr: &'license_nr str,
    ) -> Result<
        ResponseContent<GetLicenseCapacityHistoryByLicenseNrSuccess>,
        Error<GetLicenseCapacityHistoryByLicenseNrError>,
    > {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v1/licenses/{license_nr}/capacity-history",
            local_var_configuration.base_path,
            license_nr = crate::apis::urlencode(license_nr)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetLicenseCapacityHistoryByLicenseNrSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetLicenseCapacityHistoryByLicenseNrError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_license_connection_for_site_by_site_nr1<'license_nr>(
        &self,
        license_nr: &'license_nr str,
    ) -> Result<
        ResponseContent<GetLicenseConnectionForSiteBySiteNr1Success>,
        Error<GetLicenseConnectionForSiteBySiteNr1Error>,
    > {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v1/licenses/{license_nr}/site-connections",
            local_var_configuration.base_path,
            license_nr = crate::apis::urlencode(license_nr)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetLicenseConnectionForSiteBySiteNr1Success> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetLicenseConnectionForSiteBySiteNr1Error> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_licenses<
        'license_nr,
        'original_license_nr,
        'legal_entity_nr_id,
        'legal_entity_nr,
        'legal_entity_name,
        'portfolio_type,
        'tag,
        'not_tag,
        'intention,
        'produces,
        'species_code,
        'species_type,
        'species_comp_id,
        'municipality_code,
        'county_code,
        'production_area_code,
        'valid_from,
        'registered_from,
        'temporary_until,
        'temporary_from,
        'range,
    >(
        &self,
        params: GetLicensesParams<
        'license_nr,
        'original_license_nr,
        'legal_entity_nr_id,
        'legal_entity_nr,
        'legal_entity_name,
        'portfolio_type,
        'tag,
        'not_tag,
        'intention,
        'produces,
        'species_code,
        'species_type,
        'species_comp_id,
        'municipality_code,
        'county_code,
        'production_area_code,
        'valid_from,
        'registered_from,
        'temporary_until,
        'temporary_from,
        'range,
        >
    ) -> Result<ResponseContent<GetLicensesSuccess>, Error<GetLicensesError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/api/v1/licenses", local_var_configuration.base_path);
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = params.license_nr {
            local_var_req_builder =
                local_var_req_builder.query(&[("license-nr", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.original_license_nr {
            local_var_req_builder =
                local_var_req_builder.query(&[("original-license-nr", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.legal_entity_nr_id {
            local_var_req_builder =
                local_var_req_builder.query(&[("legal-entity-nr-id", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.legal_entity_nr {
            local_var_req_builder =
                local_var_req_builder.query(&[("legal-entity-nr", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.legal_entity_name {
            local_var_req_builder =
                local_var_req_builder.query(&[("legal-entity-name", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.portfolio_type {
            local_var_req_builder =
                local_var_req_builder.query(&[("portfolio-type", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.tag {
            local_var_req_builder =
                local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.not_tag {
            local_var_req_builder =
                local_var_req_builder.query(&[("not-tag", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.intention {
            local_var_req_builder =
                local_var_req_builder.query(&[("intention", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.produces {
            local_var_req_builder =
                local_var_req_builder.query(&[("produces", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.species_code {
            local_var_req_builder =
                local_var_req_builder.query(&[("species-code", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.species_type {
            local_var_req_builder =
                local_var_req_builder.query(&[("species-type", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.species_comp_id {
            local_var_req_builder =
                local_var_req_builder.query(&[("species-comp-id", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.municipality_code {
            local_var_req_builder =
                local_var_req_builder.query(&[("municipality-code", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.county_code {
            local_var_req_builder =
                local_var_req_builder.query(&[("county-code", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.production_area_code {
            local_var_req_builder = local_var_req_builder
                .query(&[("production-area-code", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.valid_from {
            local_var_req_builder =
                local_var_req_builder.query(&[("valid-from", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.registered_from {
            local_var_req_builder =
                local_var_req_builder.query(&[("registered-from", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.temporary_until {
            local_var_req_builder =
                local_var_req_builder.query(&[("temporary-until", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.temporary_from {
            local_var_req_builder =
                local_var_req_builder.query(&[("temporary-from", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.range {
            local_var_req_builder =
                local_var_req_builder.query(&[("range", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetLicensesSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetLicensesError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_licenses_overview<
        'license_nr,
        'original_license_nr,
        'legal_entity_nr_id,
        'legal_entity_nr,
        'legal_entity_name,
        'portfolio_type,
        'tag,
        'not_tag,
        'intention,
        'produces,
        'species_code,
        'species_type,
        'species_comp_id,
        'municipality_code,
        'county_code,
        'production_area_code,
        'valid_from,
        'registered_from,
        'temporary_until,
        'temporary_from,
        'range,
    >(
        &self,
        params: GetLicensesParams<
        'license_nr,
        'original_license_nr,
        'legal_entity_nr_id,
        'legal_entity_nr,
        'legal_entity_name,
        'portfolio_type,
        'tag,
        'not_tag,
        'intention,
        'produces,
        'species_code,
        'species_type,
        'species_comp_id,
        'municipality_code,
        'county_code,
        'production_area_code,
        'valid_from,
        'registered_from,
        'temporary_until,
        'temporary_from,
        'range,
        >
    ) -> Result<ResponseContent<GetLicensesOverviewSuccess>, Error<GetLicensesOverviewError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v1/licenses-overview",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = params.license_nr {
            local_var_req_builder =
                local_var_req_builder.query(&[("license-nr", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.original_license_nr {
            local_var_req_builder =
                local_var_req_builder.query(&[("original-license-nr", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.legal_entity_nr_id {
            local_var_req_builder =
                local_var_req_builder.query(&[("legal-entity-nr-id", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.legal_entity_nr {
            local_var_req_builder =
                local_var_req_builder.query(&[("legal-entity-nr", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.legal_entity_name {
            local_var_req_builder =
                local_var_req_builder.query(&[("legal-entity-name", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.portfolio_type {
            local_var_req_builder =
                local_var_req_builder.query(&[("portfolio-type", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.tag {
            local_var_req_builder =
                local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.not_tag {
            local_var_req_builder =
                local_var_req_builder.query(&[("not-tag", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.intention {
            local_var_req_builder =
                local_var_req_builder.query(&[("intention", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.produces {
            local_var_req_builder =
                local_var_req_builder.query(&[("produces", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.species_code {
            local_var_req_builder =
                local_var_req_builder.query(&[("species-code", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.species_type {
            local_var_req_builder =
                local_var_req_builder.query(&[("species-type", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.species_comp_id {
            local_var_req_builder =
                local_var_req_builder.query(&[("species-comp-id", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.municipality_code {
            local_var_req_builder =
                local_var_req_builder.query(&[("municipality-code", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.county_code {
            local_var_req_builder =
                local_var_req_builder.query(&[("county-code", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.production_area_code {
            local_var_req_builder = local_var_req_builder
                .query(&[("production-area-code", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.valid_from {
            local_var_req_builder =
                local_var_req_builder.query(&[("valid-from", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.registered_from {
            local_var_req_builder =
                local_var_req_builder.query(&[("registered-from", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.temporary_until {
            local_var_req_builder =
                local_var_req_builder.query(&[("temporary-until", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.temporary_from {
            local_var_req_builder =
                local_var_req_builder.query(&[("temporary-from", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.range {
            local_var_req_builder =
                local_var_req_builder.query(&[("range", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetLicensesOverviewSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetLicensesOverviewError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_liens<'license_nr>(
        &self,
        license_nr: &'license_nr str,
    ) -> Result<ResponseContent<GetLiensSuccess>, Error<GetLiensError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v1/licenses/{license_nr}/liens",
            local_var_configuration.base_path,
            license_nr = crate::apis::urlencode(license_nr)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetLiensSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetLiensError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed successes of method [`get_ajour_transfers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAjourTransfersSuccess {
    Status200(models::LicenseTransfers),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_by_license_nr`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetByLicenseNrSuccess {
    Status200(models::LicenseDetail),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_decisions1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDecisions1Success {
    Status200(Vec<models::LicenseDecision>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_license_capacity_history_by_license_nr`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLicenseCapacityHistoryByLicenseNrSuccess {
    Status200(Vec<models::LicenseCapacityHistory>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_license_connection_for_site_by_site_nr1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLicenseConnectionForSiteBySiteNr1Success {
    Status200(Vec<models::SiteConnectionForLicense>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_licenses`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLicensesSuccess {
    Status200(Vec<models::LicenseDetail>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_licenses_overview`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLicensesOverviewSuccess {
    Status200(Vec<models::LicenseOverview>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_liens`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLiensSuccess {
    Status200(models::LienHolders),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_ajour_transfers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAjourTransfersError {
    Status400(std::collections::HashMap<String, Vec<String>>),
    Status500(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_by_license_nr`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetByLicenseNrError {
    Status400(std::collections::HashMap<String, Vec<String>>),
    Status500(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_decisions1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDecisions1Error {
    Status400(std::collections::HashMap<String, Vec<String>>),
    Status500(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_license_capacity_history_by_license_nr`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLicenseCapacityHistoryByLicenseNrError {
    Status400(std::collections::HashMap<String, Vec<String>>),
    Status500(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_license_connection_for_site_by_site_nr1`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLicenseConnectionForSiteBySiteNr1Error {
    Status400(std::collections::HashMap<String, Vec<String>>),
    Status500(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_licenses`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLicensesError {
    Status400(std::collections::HashMap<String, Vec<String>>),
    Status500(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_licenses_overview`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLicensesOverviewError {
    Status400(std::collections::HashMap<String, Vec<String>>),
    Status500(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_liens`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLiensError {
    Status400(std::collections::HashMap<String, Vec<String>>),
    Status500(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}
