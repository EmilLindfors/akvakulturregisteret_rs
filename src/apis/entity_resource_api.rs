/*
 * Offentlig Akvakulturregister
 *
 * API for det nye offentlige Akvakulturregisteret
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: akva-hjelp@fiskeridir.no
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use async_trait::async_trait;
use bon::Builder;
#[cfg(feature = "mockall")]
use mockall::automock;
use reqwest;
use serde::{Deserialize, Serialize};
use std::sync::Arc;

#[derive(Builder)]
pub struct EntityResourceApiParams<
    'entity_nr_id,
    'entity_nr,
    'name,
    'zip_code,
    'zip_name,
    'county_code,
    'county_name,
    'country_code,
    'country_name,
    'range,
> {
    entity_nr_id: Option<&'entity_nr_id str>,
    entity_nr: Option<&'entity_nr str>,
    name: Option<&'name str>,
    zip_code: Option<&'zip_code str>,
    zip_name: Option<&'zip_name str>,
    county_code: Option<&'county_code str>,
    county_name: Option<&'county_name str>,
    country_code: Option<&'country_code str>,
    country_name: Option<&'country_name str>,
    range: Option<&'range str>,
}

#[derive(Builder)]
pub struct GetSitesForEntityApiParams<
    'entity_nr_id,
    'range,
    'include_all_connections,
    'activity,
    'operation,
> {
    entity_nr_id: &'entity_nr_id str,
    range: Option<&'range str>,
    include_all_connections: Option<&'include_all_connections str>,
    activity: Option<&'activity str>,
    operation: Option<&'operation str>,
}

#[cfg_attr(feature = "mockall", automock)]
#[async_trait]
pub trait EntityResourceApi: Send + Sync {
    async fn entities<
        'entity_nr_id,
        'entity_nr,
        'name,
        'zip_code,
        'zip_name,
        'county_code,
        'county_name,
        'country_code,
        'country_name,
        'range,
    >(
        &self,
        params: EntityResourceApiParams<
            'entity_nr_id,
            'entity_nr,
            'name,
            'zip_code,
            'zip_name,
            'county_code,
            'county_name,
            'country_code,
            'country_name,
            'range,
        >,
    ) -> Result<ResponseContent<EntitiesSuccess>, Error<EntitiesError>>;
    async fn get_entity<'entity_nr_id>(
        &self,
        entity_nr_id: &'entity_nr_id str,
    ) -> Result<ResponseContent<GetEntitySuccess>, Error<GetEntityError>>;
    async fn get_sites_for_entity<
        'entity_nr_id,
        'range,
        'include_all_connections,
        'activity,
        'operation,
    >(
        &self,
        params: GetSitesForEntityApiParams<
            'entity_nr_id,
            'range,
            'include_all_connections,
            'activity,
            'operation,
        >,
    ) -> Result<ResponseContent<GetSitesForEntitySuccess>, Error<GetSitesForEntityError>>;
    async fn get_sites_for_entity_by_legal_entity_nr<
        'entity_nr,
        'range,
        'include_all_connections,
        'activity,
        'operation,
    >(
        &self,
        params: GetSitesForEntityApiParams<
        'entity_nr,
        'range,
        'include_all_connections,
        'activity,
        'operation,
    >,
    ) -> Result<
        ResponseContent<GetSitesForEntityByLegalEntityNrSuccess>,
        Error<GetSitesForEntityByLegalEntityNrError>,
    >;
}

pub struct EntityResourceApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl EntityResourceApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

#[async_trait]
impl EntityResourceApi for EntityResourceApiClient {
    async fn entities<
        'entity_nr_id,
        'entity_nr,
        'name,
        'zip_code,
        'zip_name,
        'county_code,
        'county_name,
        'country_code,
        'country_name,
        'range,
    >(
        &self,
        params: EntityResourceApiParams<
            'entity_nr_id,
            'entity_nr,
            'name,
            'zip_code,
            'zip_name,
            'county_code,
            'county_name,
            'country_code,
            'country_name,
            'range,
        >,
    ) -> Result<ResponseContent<EntitiesSuccess>, Error<EntitiesError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/api/v1/entities", local_var_configuration.base_path);
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = params.entity_nr_id {
            local_var_req_builder =
                local_var_req_builder.query(&[("entity-nr-id", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.entity_nr {
            local_var_req_builder =
                local_var_req_builder.query(&[("entity-nr", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.name {
            local_var_req_builder =
                local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.zip_code {
            local_var_req_builder =
                local_var_req_builder.query(&[("zip-code", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.zip_name {
            local_var_req_builder =
                local_var_req_builder.query(&[("zip-name", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.county_code {
            local_var_req_builder =
                local_var_req_builder.query(&[("county-code", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.county_name {
            local_var_req_builder =
                local_var_req_builder.query(&[("county-name", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.country_code {
            local_var_req_builder =
                local_var_req_builder.query(&[("country-code", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.country_name {
            local_var_req_builder =
                local_var_req_builder.query(&[("country-name", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.range {
            local_var_req_builder =
                local_var_req_builder.query(&[("range", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<EntitiesSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<EntitiesError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_entity<'entity_nr_id>(
        &self,
        entity_nr_id: &'entity_nr_id str,
    ) -> Result<ResponseContent<GetEntitySuccess>, Error<GetEntityError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v1/entities/{entity_nr_id}",
            local_var_configuration.base_path,
            entity_nr_id = crate::apis::urlencode(entity_nr_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetEntitySuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetEntityError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_sites_for_entity<
        'entity_nr_id,
        'range,
        'include_all_connections,
        'activity,
        'operation,
    >(
        &self,
        params: GetSitesForEntityApiParams<
            'entity_nr_id,
            'range,
            'include_all_connections,
            'activity,
            'operation,
        >,
    ) -> Result<ResponseContent<GetSitesForEntitySuccess>, Error<GetSitesForEntityError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v1/entities/{entity_nr_id}/sites",
            local_var_configuration.base_path,
            entity_nr_id = crate::apis::urlencode(params.entity_nr_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = params.range {
            local_var_req_builder =
                local_var_req_builder.query(&[("range", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.include_all_connections {
            local_var_req_builder = local_var_req_builder
                .query(&[("include-all-connections", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.activity {
            local_var_req_builder =
                local_var_req_builder.query(&[("activity", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.operation {
            local_var_req_builder =
                local_var_req_builder.query(&[("operation", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetSitesForEntitySuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetSitesForEntityError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_sites_for_entity_by_legal_entity_nr<
        'entity_nr,
        'range,
        'include_all_connections,
        'activity,
        'operation,
    >(
        &self,
        params: GetSitesForEntityApiParams<
            'entity_nr,
            'range,
            'include_all_connections,
            'activity,
            'operation,
        >,
    ) -> Result<
        ResponseContent<GetSitesForEntityByLegalEntityNrSuccess>,
        Error<GetSitesForEntityByLegalEntityNrError>,
    > {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v1/entities/sites-by-entity-nr/{entity_nr}",
            local_var_configuration.base_path,
            entity_nr = crate::apis::urlencode(params.entity_nr_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = params.range {
            local_var_req_builder =
                local_var_req_builder.query(&[("range", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.include_all_connections {
            local_var_req_builder = local_var_req_builder
                .query(&[("include-all-connections", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.activity {
            local_var_req_builder =
                local_var_req_builder.query(&[("activity", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = params.operation {
            local_var_req_builder =
                local_var_req_builder.query(&[("operation", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetSitesForEntityByLegalEntityNrSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetSitesForEntityByLegalEntityNrError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed successes of method [`entities`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesSuccess {
    Status200(Vec<models::Entity>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_entity`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetEntitySuccess {
    Status200(models::Entity),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_sites_for_entity`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSitesForEntitySuccess {
    Status200(Vec<models::SiteForLegalEntity>),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method [`get_sites_for_entity_by_legal_entity_nr`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSitesForEntityByLegalEntityNrSuccess {
    Status200(Vec<models::SiteForLegalEntity>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`entities`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EntitiesError {
    Status400(std::collections::HashMap<String, Vec<String>>),
    Status500(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_entity`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetEntityError {
    Status400(std::collections::HashMap<String, Vec<String>>),
    Status500(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_sites_for_entity`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSitesForEntityError {
    Status400(std::collections::HashMap<String, Vec<String>>),
    Status500(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_sites_for_entity_by_legal_entity_nr`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSitesForEntityByLegalEntityNrError {
    Status400(std::collections::HashMap<String, Vec<String>>),
    Status500(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}
