/*
 * Offentlig Akvakulturregister
 *
 * API for det nye offentlige Akvakulturregisteret
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: akva-hjelp@fiskeridir.no
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Entity : Enhet.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Entity {
    /// Unik enhets identifikator.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Unik versjons identifikator.
    #[serde(rename = "versionId", skip_serializing_if = "Option::is_none")]
    pub version_id: Option<i64>,
    /// Åpent nummer.
    #[serde(rename = "openNr", skip_serializing_if = "Option::is_none")]
    pub open_nr: Option<String>,
    /// Navnetypen
    #[serde(rename = "typeName", skip_serializing_if = "Option::is_none")]
    pub type_name: Option<String>,
    /// Typeverdien.
    #[serde(rename = "typeValue", skip_serializing_if = "Option::is_none")]
    pub type_value: Option<String>,
    /// Navnet til enheten.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "businessTypes", skip_serializing_if = "Option::is_none")]
    pub business_types: Option<Vec<models::BusinessType>>,
    /// Offisiell kildetype til enheten.
    #[serde(rename = "officialSourceType", skip_serializing_if = "Option::is_none")]
    pub official_source_type: Option<String>,
    #[serde(rename = "addresses", skip_serializing_if = "Option::is_none")]
    pub addresses: Option<Vec<models::Address>>,
    /// Liste av industrikoder som enheten har.
    #[serde(rename = "industryCodes", skip_serializing_if = "Option::is_none")]
    pub industry_codes: Option<Vec<String>>,
    /// Liste av enhetens statuser i brønnøysundsregisteret.
    #[serde(rename = "brregStatuses", skip_serializing_if = "Option::is_none")]
    pub brreg_statuses: Option<Vec<String>>,
    /// Tidsstempel for når enhetsversjonen er gyldig fra.
    #[serde(rename = "versionValidFrom", skip_serializing_if = "Option::is_none")]
    pub version_valid_from: Option<String>,
    /// Tidsstempel for når enhetsversjonen er gyldig til.
    #[serde(rename = "versionValidUntil", skip_serializing_if = "Option::is_none")]
    pub version_valid_until: Option<String>,
    /// Tidsstempel for når enhetsversjonen er registrert.
    #[serde(
        rename = "versionRegisteredTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub version_registered_time: Option<String>,
    /// Hvem som registrerte enhetsversjonen.
    #[serde(
        rename = "versionRegisteredBy",
        skip_serializing_if = "Option::is_none"
    )]
    pub version_registered_by: Option<String>,
    /// Status.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

impl Entity {
    /// Enhet.
    pub fn new() -> Entity {
        Entity {
            id: None,
            version_id: None,
            open_nr: None,
            type_name: None,
            type_value: None,
            name: None,
            business_types: None,
            official_source_type: None,
            addresses: None,
            industry_codes: None,
            brreg_statuses: None,
            version_valid_from: None,
            version_valid_until: None,
            version_registered_time: None,
            version_registered_by: None,
            status: None,
        }
    }
}
