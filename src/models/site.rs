/*
 * Offentlig Akvakulturregister
 *
 * API for det nye offentlige Akvakulturregisteret
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: akva-hjelp@fiskeridir.no
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Site : Lokalitet
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Site {
    /// Unik lokalitets identifikator
    #[serde(rename = "siteId", skip_serializing_if = "Option::is_none")]
    pub site_id: Option<i64>,
    /// Versjons ID
    #[serde(rename = "versionId", skip_serializing_if = "Option::is_none")]
    pub version_id: Option<i64>,
    /// Lokalitetsnummer
    #[serde(rename = "siteNr", skip_serializing_if = "Option::is_none")]
    pub site_nr: Option<i32>,
    /// Navnet på lokaliteten
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Plasseringstypen til lokaliteten
    #[serde(rename = "placementType", skip_serializing_if = "Option::is_none")]
    pub placement_type: Option<String>,
    /// Plasseringstypeverdien til lokaliteten
    #[serde(rename = "placementTypeValue", skip_serializing_if = "Option::is_none")]
    pub placement_type_value: Option<String>,
    /// Vanntype som benyttes på lokaliteten
    #[serde(rename = "waterType", skip_serializing_if = "Option::is_none")]
    pub water_type: Option<String>,
    /// Vanntypeverdien på lokaliteten
    #[serde(rename = "waterTypeValue", skip_serializing_if = "Option::is_none")]
    pub water_type_value: Option<String>,
    /// Første klareringstiden til lokaliteten
    #[serde(rename = "firstClearanceTime", skip_serializing_if = "Option::is_none")]
    pub first_clearance_time: Option<String>,
    /// Første klareringstypen til lokaliteten
    #[serde(rename = "firstClearanceType", skip_serializing_if = "Option::is_none")]
    pub first_clearance_type: Option<String>,
    /// Første klareringstypeverdien til lokaliteten
    #[serde(rename = "firstClearanceTypeValue", skip_serializing_if = "Option::is_none")]
    pub first_clearance_type_value: Option<String>,
    /// Breddegrad
    #[serde(rename = "latitude", skip_serializing_if = "Option::is_none")]
    pub latitude: Option<f64>,
    /// Lengdegrad
    #[serde(rename = "longitude", skip_serializing_if = "Option::is_none")]
    pub longitude: Option<f64>,
    /// Kapasiteten til lokaliteten
    #[serde(rename = "capacity", skip_serializing_if = "Option::is_none")]
    pub capacity: Option<f64>,
    /// Den midlertidige kapasiteten til lokaliteten
    #[serde(rename = "tempCapacity", skip_serializing_if = "Option::is_none")]
    pub temp_capacity: Option<f64>,
    /// Kapasitets enhetstype
    #[serde(rename = "capacityUnitType", skip_serializing_if = "Option::is_none")]
    pub capacity_unit_type: Option<String>,
    #[serde(rename = "placement", skip_serializing_if = "Option::is_none")]
    pub placement: Option<Box<models::AreaPlacement>>,
    /// Artstype
    #[serde(rename = "speciesType", skip_serializing_if = "Option::is_none")]
    pub species_type: Option<String>,
    /// Artstypeverdi
    #[serde(rename = "speciesTypeValue", skip_serializing_if = "Option::is_none")]
    pub species_type_value: Option<String>,
    /// Artsbegrensninger
    #[serde(rename = "speciesLimitations", skip_serializing_if = "Option::is_none")]
    pub species_limitations: Option<Vec<models::FishCode>>,
    /// Forbindelsene til lokaliteten
    #[serde(rename = "connections", skip_serializing_if = "Option::is_none")]
    pub connections: Option<Vec<models::LatestLicenseSiteConnectionDetail>>,
    /// Utdaterte forbindelser til lokaliteten
    #[serde(rename = "obsoleteConnections", skip_serializing_if = "Option::is_none")]
    pub obsolete_connections: Option<Vec<models::LatestLicenseSiteConnectionDetail>>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<Box<models::VersionDetail>>,
    /// Om lokalitet er slakteri eller ikke
    #[serde(rename = "isSlaughtery", skip_serializing_if = "Option::is_none")]
    pub is_slaughtery: Option<bool>,
    /// Om lokaliteten har kommersiell aktivitet eller ikke
    #[serde(rename = "hasCommercialActivity", skip_serializing_if = "Option::is_none")]
    pub has_commercial_activity: Option<bool>,
    /// Om lokaliteten er en del av samlokalitet
    #[serde(rename = "hasColocation", skip_serializing_if = "Option::is_none")]
    pub has_colocation: Option<bool>,
    /// Om lokaliteten har felles drift med annen lokalitet
    #[serde(rename = "hasJointOperation", skip_serializing_if = "Option::is_none")]
    pub has_joint_operation: Option<bool>,
}

impl Site {
    /// Lokalitet
    pub fn new() -> Site {
        Site {
            site_id: None,
            version_id: None,
            site_nr: None,
            name: None,
            placement_type: None,
            placement_type_value: None,
            water_type: None,
            water_type_value: None,
            first_clearance_time: None,
            first_clearance_type: None,
            first_clearance_type_value: None,
            latitude: None,
            longitude: None,
            capacity: None,
            temp_capacity: None,
            capacity_unit_type: None,
            placement: None,
            species_type: None,
            species_type_value: None,
            species_limitations: None,
            connections: None,
            obsolete_connections: None,
            version: None,
            is_slaughtery: None,
            has_commercial_activity: None,
            has_colocation: None,
            has_joint_operation: None,
        }
    }
}

